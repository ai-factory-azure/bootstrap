trigger:
- main

variables:
- group: bootstrap-variables-kv
- template: project-variables.yml
- name: ADO-PROJECT-NAME
  value: project-$(PROJECT-NAME)

jobs:
- job: Linux
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - bash: az --version
    displayName: 'Show Azure CLI version'

  - bash: echo ${AZURE_DEVOPS_CLI_PAT} | az devops login
    env:
      AZURE_DEVOPS_CLI_PAT: $(System.AccessToken)
    displayName: 'Login Azure DevOps Extension'
  
  - bash:
      az devops project create --name $(ADO-PROJECT-NAME) --organization $(System.TeamFoundationCollectionUri)
    continueOnError: true
    displayName: 'Create a new project'

  - bash: az devops configure --defaults organization=$(System.TeamFoundationCollectionUri) project=$(ADO-PROJECT-NAME) --use-git-aliases true
    displayName: 'Set default Azure DevOps organization and project'

  - bash: 
      echo '##vso[task.setvariable variable=AZURE_DEVOPS_EXT_GITHUB_PAT]$(AZURE-DEVOPS-EXT-GITHUB-PAT)'
    displayName: Set Github PAT variable value
  
  - bash: 
      echo '##vso[task.setvariable variable=GITHUB_TOKEN]$(AZURE-DEVOPS-EXT-GITHUB-PAT)'
    displayName: Set Github PAT for CLI

  - bash: 
      echo '##vso[task.setvariable variable=AZURE_DEVOPS_EXT_AZURE_RM_SERVICE_PRINCIPAL_KEY]$(AZURE-RM-SERVICE-PRINCIPAL-KEY-DEV)'
    displayName: Set Azure Service Principal value

  - bash:
      az devops service-endpoint delete --id $(az devops service-endpoint list 
                                              --organization $(System.TeamFoundationCollectionUri) 
                                              --project $(ADO-PROJECT-NAME) -o table |grep $(GITHUB-SERVICE-ENDPOINT-NAME)|cut -d" " -f1) 
                                              --yes
    continueOnError: true
    displayName: 'Delete Github Service Endpoint if exists'

  - bash: 
      az devops service-endpoint github create  --github-url $(GITHUB-ORG-URL) 
                                                --name $(GITHUB-SERVICE-ENDPOINT-NAME) 
                                                --org $(System.TeamFoundationCollectionUri)
                                                --project $(ADO-PROJECT-NAME)
    continueOnError: true
    displayName: 'Create Github Service Endpoint if does not exist'
    
  - bash:
      az devops service-endpoint update --id $(az devops service-endpoint list --organization $(System.TeamFoundationCollectionUri) --project $(ADO-PROJECT-NAME) -o table |grep $(GITHUB-SERVICE-ENDPOINT-NAME)|cut -d" " -f1) --enable-for-all --organization $(System.TeamFoundationCollectionUri) --project $(ADO-PROJECT-NAME)
    displayName: 'Update Github Service Endpoint'

  - bash:
      az devops service-endpoint delete --id $(az devops service-endpoint list 
                                              --organization $(System.TeamFoundationCollectionUri) 
                                              --project $(ADO-PROJECT-NAME) -o table |grep $(AZURE-SERVICE-ENDPOINT-NAME)|cut -d" " -f1) 
                                              --yes
    continueOnError: true
    displayName: 'Delete Azure Service Connection if exists'  

  - bash:
      az devops service-endpoint azurerm create --azure-rm-service-principal-id $(AZURE-RM-SERVICE-PRINCIPAL-ID-DEV)
                                          --azure-rm-subscription-id $(AZURE-RM-SUBSCRIPTION-ID-DEV)
                                          --azure-rm-subscription-name "$(AZURE-RM-SUBSCRIPTION-NAME-DEV)"
                                          --azure-rm-tenant-id $(AZURE-RM-TENANT-ID)
                                          --name $(AZURE-SERVICE-ENDPOINT-NAME)
                                          --org $(System.TeamFoundationCollectionUri) 
                                          --project $(ADO-PROJECT-NAME)
    displayName: 'Create Azure Service Connection'
    
  - bash:
      az devops service-endpoint update --id $(az devops service-endpoint list --organization $(System.TeamFoundationCollectionUri) --project $(ADO-PROJECT-NAME) -o table |grep $(AZURE-SERVICE-ENDPOINT-NAME)|cut -d" " -f1) --enable-for-all --organization $(System.TeamFoundationCollectionUri) --project $(ADO-PROJECT-NAME)
    displayName: 'Update Azure service endpoint'

  - bash:
      curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
      sudo apt update
      sudo apt install gh
    displayName: 'Install gh' 

  - bash:
      gh repo create $(GITHUB-ORG-NAME)/project-$(PROJECT-NAME) -p $(CODE-TEMPLATE) --private --confirm
    continueOnError: true
    displayName: 'Create git repo for the project from template'

  - bash:
      az pipelines delete --id $(az pipelines list 
                          --organization $(System.TeamFoundationCollectionUri) 
                          --project $(ADO-PROJECT-NAME) -o table |grep $(IAC-PIPELINE-NAME)|cut -d" " -f1) 
                          --yes
    continueOnError: true
    displayName: 'Delete IAC Pipeline if exists'

  - bash:
      az pipelines create --name $(IAC-PIPELINE-NAME)
                          --description 'Pipeline for IAC'
                          --repository $(GITHUB-ORG-URL)/$(ADO-PROJECT-NAME)
                          --branch $(IAC-BRANCH)
                          --yml-path $(IAC-YML-PATH)
                          --service-connection $(az devops service-endpoint list --organization $(System.TeamFoundationCollectionUri) --project $(ADO-PROJECT-NAME) -o table |grep $(GITHUB-SERVICE-ENDPOINT-NAME)|cut -d" " -f1)
                          --org $(System.TeamFoundationCollectionUri) 
                          --project $(ADO-PROJECT-NAME)   
                          --skip-first-run true
    displayName: 'Create IAC Pipeline using YAML'

  - bash:
      az pipelines delete --id $(az pipelines list 
                          --organization $(System.TeamFoundationCollectionUri) 
                          --project $(ADO-PROJECT-NAME) -o table |grep $(MODEL-TRAINING-PIPELINE-NAME)|cut -d" " -f1) 
                          --yes
    continueOnError: true
    displayName: 'Delete Training Pipeline if exists'

  - bash:
      az pipelines create --name $(MODEL-TRAINING-PIPELINE-NAME)
                          --description 'Pipeline for Model training'
                          --repository $(GITHUB-ORG-URL)/$(ADO-PROJECT-NAME)
                          --branch $(MODEL-TRAINING-BRANCH)
                          --yml-path $(MODEL-TRAINING-YML-PATH)
                          --service-connection $(az devops service-endpoint list --organization $(System.TeamFoundationCollectionUri) --project $(ADO-PROJECT-NAME) -o table |grep $(GITHUB-SERVICE-ENDPOINT-NAME)|cut -d" " -f1)
                          --org $(System.TeamFoundationCollectionUri) 
                          --project $(ADO-PROJECT-NAME)   
                          --skip-first-run true        
    displayName: 'Create Training Pipeline from YAML'

  - bash:
      az pipelines delete --id $(az pipelines list 
                          --organization $(System.TeamFoundationCollectionUri) 
                          --project $(ADO-PROJECT-NAME) -o table |grep $(BATCH-SCORING-PIPELINE-NAME)|cut -d" " -f1) 
                          --yes
    continueOnError: true
    displayName: 'Delete Batch Scoring Pipeline if exists'

  - bash:
      az pipelines create --name $(BATCH-SCORING-PIPELINE-NAME)
                          --description 'Pipeline for Model training'
                          --repository $(GITHUB-ORG-URL)/$(ADO-PROJECT-NAME)
                          --branch $(BATCH-SCORING-BRANCH)
                          --yml-path $(BATCH-SCORING-YML-PATH)
                          --service-connection $(az devops service-endpoint list --organization $(System.TeamFoundationCollectionUri) --project $(ADO-PROJECT-NAME) -o table |grep $(GITHUB-SERVICE-ENDPOINT-NAME)|cut -d" " -f1)
                          --org $(System.TeamFoundationCollectionUri) 
                          --project $(ADO-PROJECT-NAME)   
                          --skip-first-run true                    
    displayName: 'Create Batch Scoring Pipeline from YAML'

  - bash:
      az pipelines delete --id $(az pipelines list 
                          --organization $(System.TeamFoundationCollectionUri) 
                          --project $(ADO-PROJECT-NAME) -o table |grep $(REALTIME-SCORING-PIPELINE-NAME)|cut -d" " -f1) 
                          --yes
    continueOnError: true
    displayName: 'Delete Realtime Scoring Pipeline if exists'    

  - bash:
      az pipelines create --name $(REALTIME-SCORING-PIPELINE-NAME)
                          --description 'Pipeline for realtime scoring'
                          --repository $(GITHUB-ORG-URL)/$(ADO-PROJECT-NAME)
                          --branch $(REALTIME-SCORING-BRANCH)
                          --yml-path $(REALTIME-SCORING-YML-PATH)
                          --service-connection $(az devops service-endpoint list --organization $(System.TeamFoundationCollectionUri) --project $(ADO-PROJECT-NAME) -o table |grep $(GITHUB-SERVICE-ENDPOINT-NAME)|cut -d" " -f1)
                          --org $(System.TeamFoundationCollectionUri) 
                          --project $(ADO-PROJECT-NAME)   
                          --skip-first-run true                    
    displayName: 'Create Realtime Scoring Pipeline from YAML'
